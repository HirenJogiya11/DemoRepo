import { Injectable, Inject, OpaqueToken } from '@angular/core';
import { FormlyGroup } from '../components/formly.group';
import { reverseDeepMerge } from './../utils';
export var FORMLY_CONFIG_TOKEN = new OpaqueToken('FORMLY_CONFIG_TOKEN');
export var FormlyConfig = (function () {
    function FormlyConfig(configs) {
        var _this = this;
        if (configs === void 0) { configs = []; }
        this.types = {
            'formly-group': {
                name: 'formly-group',
                component: FormlyGroup,
            },
        };
        this.validators = {};
        this.wrappers = {};
        this.templateManipulators = {
            preWrapper: [],
            postWrapper: [],
        };
        this.extras = {
            fieldTransform: undefined,
        };
        configs.map(function (config) {
            if (config.types) {
                config.types.map(function (type) { return _this.setType(type); });
            }
            if (config.validators) {
                config.validators.map(function (validator) { return _this.setValidator(validator); });
            }
            if (config.wrappers) {
                config.wrappers.map(function (wrapper) { return _this.setWrapper(wrapper); });
            }
            if (config.manipulators) {
                config.manipulators.map(function (manipulator) { return _this.setManipulator(manipulator); });
            }
        });
    }
    FormlyConfig.prototype.setType = function (options) {
        var _this = this;
        if (Array.isArray(options)) {
            options.map(function (option) {
                _this.setType(option);
            });
        }
        else {
            if (!this.types[options.name]) {
                this.types[options.name] = {};
            }
            this.types[options.name].component = options.component;
            this.types[options.name].name = options.name;
            this.types[options.name].extends = options.extends;
            this.types[options.name].defaultOptions = options.defaultOptions;
            if (options.wrappers) {
                options.wrappers.map(function (wrapper) {
                    _this.setTypeWrapper(options.name, wrapper);
                });
            }
        }
    };
    FormlyConfig.prototype.getType = function (name) {
        if (!this.types[name]) {
            throw new Error("[Formly Error] There is no type by the name of \"" + name + "\"");
        }
        if (!this.types[name].component && this.types[name].extends) {
            this.types[name].component = this.getType(this.types[name].extends).component;
        }
        return this.types[name];
    };
    FormlyConfig.prototype.getMergedField = function (field) {
        var _this = this;
        if (field === void 0) { field = {}; }
        var name = field.type;
        if (!this.types[name]) {
            throw new Error("[Formly Error] There is no type by the name of \"" + name + "\"");
        }
        if (!this.types[name].component && this.types[name].extends) {
            this.types[name].component = this.getType(this.types[name].extends).component;
        }
        if (this.types[name].defaultOptions) {
            reverseDeepMerge(field, this.types[name].defaultOptions);
        }
        var extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;
        if (extendDefaults) {
            reverseDeepMerge(field, extendDefaults);
        }
        if (field && field.optionsTypes) {
            field.optionsTypes.map(function (option) {
                var defaultOptions = _this.getType(option).defaultOptions;
                if (defaultOptions) {
                    reverseDeepMerge(field, defaultOptions);
                }
            });
        }
        reverseDeepMerge(field, this.types[name]);
    };
    FormlyConfig.prototype.setWrapper = function (options) {
        var _this = this;
        this.wrappers[options.name] = options;
        if (options.types) {
            options.types.map(function (type) {
                _this.setTypeWrapper(type, options.name);
            });
        }
    };
    FormlyConfig.prototype.getWrapper = function (name) {
        if (!this.wrappers[name]) {
            throw new Error("[Formly Error] There is no wrapper by the name of \"" + name + "\"");
        }
        return this.wrappers[name];
    };
    FormlyConfig.prototype.setTypeWrapper = function (type, name) {
        if (!this.types[type]) {
            this.types[type] = {};
        }
        if (!this.types[type].wrappers) {
            this.types[type].wrappers = [];
        }
        this.types[type].wrappers.push(name);
    };
    FormlyConfig.prototype.setValidator = function (options) {
        this.validators[options.name] = options;
    };
    FormlyConfig.prototype.getValidator = function (name) {
        if (!this.validators[name]) {
            throw new Error("[Formly Error] There is no validator by the name of \"" + name + "\"");
        }
        return this.validators[name];
    };
    FormlyConfig.prototype.setManipulator = function (manipulator) {
        new manipulator.class()[manipulator.method](this);
    };
    FormlyConfig.decorators = [
        { type: Injectable },
    ];
    FormlyConfig.ctorParameters = [
        { type: Array, decorators: [{ type: Inject, args: [FORMLY_CONFIG_TOKEN,] },] },
    ];
    return FormlyConfig;
}());
//# sourceMappingURL=formly.config.js.map