import { Injectable } from '@angular/core';
import { FormGroup, FormArray, FormControl, Validators } from '@angular/forms';
import { FormlyConfig } from './formly.config';
import { evalStringExpression, evalExpressionValueSetter, getFieldId, assignModelValue, isObject } from './../utils';
export var FormlyFormBuilder = (function () {
    function FormlyFormBuilder(formlyConfig) {
        this.formlyConfig = formlyConfig;
        this.validationOpts = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];
        this.formId = 0;
    }
    FormlyFormBuilder.prototype.buildForm = function (form, fields, model, options) {
        if (fields === void 0) { fields = []; }
        this.model = model;
        this.formId++;
        var fieldTransforms = (options && options.fieldTransform) || this.formlyConfig.extras.fieldTransform;
        if (!Array.isArray(fieldTransforms)) {
            fieldTransforms = [fieldTransforms];
        }
        fieldTransforms.forEach(function (fieldTransform) {
            if (fieldTransform) {
                fields = fieldTransform(fields, model, form, options);
                if (!fields) {
                    throw new Error('fieldTransform must return an array of fields');
                }
            }
        });
        this.registerFormControls(form, fields, model, options);
    };
    FormlyFormBuilder.prototype.registerFormControls = function (form, fields, model, options) {
        var _this = this;
        fields.map(function (field, index) {
            field.id = getFieldId("formly_" + _this.formId, field, index);
            if (field.key && field.type) {
                _this.initFieldTemplateOptions(field);
                _this.initFieldValidation(field);
                _this.initFieldAsyncValidation(field);
                var path = field.key;
                if (typeof path === 'string') {
                    if (field.defaultValue) {
                        _this.defaultPath = path;
                    }
                    path = path.split('.');
                }
                if (path.length > 1) {
                    var rootPath = path.shift();
                    var nestedForm = (form.get(rootPath) ? form.get(rootPath) : new FormGroup({}, field.validators ? field.validators.validation : undefined, field.asyncValidators ? field.asyncValidators.validation : undefined));
                    if (!form.get(rootPath)) {
                        form.addControl(rootPath, nestedForm);
                    }
                    if (!model[rootPath]) {
                        model[rootPath] = isNaN(rootPath) ? {} : [];
                    }
                    var originalKey = field.key;
                    field.key = path;
                    _this.buildForm(nestedForm, [field], model[rootPath], {});
                    field.key = originalKey;
                }
                else {
                    _this.formlyConfig.getMergedField(field);
                    _this.initFieldExpression(field);
                    _this.initFieldValidation(field);
                    _this.initFieldAsyncValidation(field);
                    _this.addFormControl(form, field, model[path[0]] || field.defaultValue || '');
                    if (field.defaultValue && !model[path[0]]) {
                        var path_1 = _this.defaultPath.split('.');
                        path_1 = path_1.pop();
                        assignModelValue(_this.model, path_1, field.defaultValue);
                        _this.defaultPath = undefined;
                    }
                }
            }
            if (field.fieldGroup) {
                if (field.key) {
                    var nestedForm = form.get(field.key), nestedModel = model[field.key] || {};
                    if (!nestedForm) {
                        nestedForm = new FormGroup({}, field.validators ? field.validators.validation : undefined, field.asyncValidators ? field.asyncValidators.validation : undefined);
                        form.addControl(field.key, nestedForm);
                    }
                    _this.buildForm(nestedForm, field.fieldGroup, nestedModel, {});
                }
                else {
                    _this.buildForm(form, field.fieldGroup, model, {});
                }
            }
            if (field.fieldArray && field.key) {
                if (!(form.get(field.key) instanceof FormArray)) {
                    var arrayForm = new FormArray([], field.validators ? field.validators.validation : undefined, field.asyncValidators ? field.asyncValidators.validation : undefined);
                    form.setControl(field.key, arrayForm);
                }
            }
        });
    };
    FormlyFormBuilder.prototype.initFieldExpression = function (field) {
        if (field.expressionProperties) {
            for (var key in field.expressionProperties) {
                if (typeof field.expressionProperties[key] === 'string') {
                    field.expressionProperties[key] = {
                        expression: evalStringExpression(field.expressionProperties[key], ['model', 'formState']),
                        expressionValueSetter: evalExpressionValueSetter(key, ['expressionValue', 'model', 'templateOptions', 'validation']),
                    };
                }
            }
        }
        if (typeof field.hideExpression === 'string') {
            field.hideExpression = evalStringExpression(field.hideExpression, ['model', 'formState']);
        }
    };
    FormlyFormBuilder.prototype.initFieldTemplateOptions = function (field) {
        field.templateOptions = Object.assign({
            label: '',
            placeholder: '',
            focus: false,
        }, field.templateOptions);
    };
    FormlyFormBuilder.prototype.initFieldAsyncValidation = function (field) {
        var _this = this;
        var validators = [];
        if (field.asyncValidators) {
            var _loop_1 = function(validatorName) {
                if (validatorName !== 'validation') {
                    validators.push(function (control) {
                        var validator = field.asyncValidators[validatorName];
                        if (isObject(validator)) {
                            validator = validator.expression;
                        }
                        return new Promise(function (resolve) {
                            return validator(control).then(function (result) {
                                resolve(result ? null : (_a = {}, _a[validatorName] = true, _a));
                                var _a;
                            });
                        });
                    });
                }
            };
            for (var validatorName in field.asyncValidators) {
                _loop_1(validatorName);
            }
        }
        if (field.asyncValidators && Array.isArray(field.asyncValidators.validation)) {
            field.asyncValidators.validation.map(function (validate) {
                if (typeof validate === 'string') {
                    validators.push(_this.formlyConfig.getValidator(validate).validation);
                }
                else {
                    validators.push(validate);
                }
            });
        }
        if (validators.length) {
            if (field.asyncValidators && !Array.isArray(field.asyncValidators.validation)) {
                field.asyncValidators.validation = Validators.composeAsync([field.asyncValidators.validation].concat(validators));
            }
            else {
                field.asyncValidators = {
                    validation: Validators.composeAsync(validators),
                };
            }
        }
    };
    FormlyFormBuilder.prototype.initFieldValidation = function (field) {
        var _this = this;
        var validators = [];
        this.validationOpts.filter(function (opt) { return field.templateOptions[opt]; }).map(function (opt) {
            validators.push(_this.getValidation(opt, field.templateOptions[opt]));
        });
        if (field.validators) {
            var _loop_2 = function(validatorName) {
                if (validatorName !== 'validation') {
                    validators.push(function (control) {
                        var validator = field.validators[validatorName];
                        if (isObject(validator)) {
                            validator = validator.expression;
                        }
                        return validator(control) ? null : (_a = {}, _a[validatorName] = true, _a);
                        var _a;
                    });
                }
            };
            for (var validatorName in field.validators) {
                _loop_2(validatorName);
            }
        }
        if (field.validators && Array.isArray(field.validators.validation)) {
            field.validators.validation.map(function (validate) {
                if (typeof validate === 'string') {
                    validators.push(_this.formlyConfig.getValidator(validate).validation);
                }
                else {
                    validators.push(validate);
                }
            });
        }
        if (validators.length) {
            if (field.validators && !Array.isArray(field.validators.validation)) {
                field.validators.validation = Validators.compose([field.validators.validation].concat(validators));
            }
            else {
                field.validators = {
                    validation: Validators.compose(validators),
                };
            }
        }
    };
    FormlyFormBuilder.prototype.addFormControl = function (form, field, model) {
        var name = typeof field.key === 'string' ? field.key : field.key[0];
        if (field.component && field.component.createControl) {
            form.addControl(name, field.component.createControl(model, field));
        }
        else {
            form.addControl(name, new FormControl({ value: model, disabled: field.templateOptions.disabled }, field.validators ? field.validators.validation : undefined, field.asyncValidators ? field.asyncValidators.validation : undefined));
        }
        if (field.validation && field.validation.show) {
            form.get(field.key).markAsTouched();
        }
    };
    FormlyFormBuilder.prototype.getValidation = function (opt, value) {
        var _this = this;
        switch (opt) {
            case this.validationOpts[0]:
                return Validators[opt];
            case this.validationOpts[1]:
            case this.validationOpts[2]:
            case this.validationOpts[3]:
                return Validators[opt](value);
            case this.validationOpts[4]:
            case this.validationOpts[5]:
                return function (changes) {
                    if (_this.checkMinMax(opt, changes.value, value)) {
                        return null;
                    }
                    else {
                        return (_a = {}, _a[opt] = true, _a);
                    }
                    var _a;
                };
        }
    };
    FormlyFormBuilder.prototype.checkMinMax = function (opt, changes, value) {
        if (opt === this.validationOpts[4]) {
            return parseInt(changes) > value;
        }
        else {
            return parseInt(changes) < value;
        }
    };
    FormlyFormBuilder.decorators = [
        { type: Injectable },
    ];
    FormlyFormBuilder.ctorParameters = [
        { type: FormlyConfig, },
    ];
    return FormlyFormBuilder;
}());
//# sourceMappingURL=formly.form.builder.js.map