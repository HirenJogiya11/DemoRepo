import { Component, Input } from '@angular/core';
import { FormControl, FormGroup, FormArray } from '@angular/forms';
import { FormlyFormBuilder } from '../services/formly.form.builder';
import { assignModelValue, isNullOrUndefined, isObject, reverseDeepMerge, getKey, getValueForKey, getFieldModel } from '../utils';
export var FormlyForm = (function () {
    function FormlyForm(formlyBuilder) {
        this.formlyBuilder = formlyBuilder;
        this.model = {};
        this.form = new FormGroup({});
        this.fields = [];
    }
    FormlyForm.prototype.ngOnChanges = function (changes) {
        if (changes['fields']) {
            this.model = this.model || {};
            this.form = this.form || (new FormGroup({}));
            this.setOptions();
            this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);
            this.updateInitialValue();
        }
        else if (changes['model'] && this.fields && this.fields.length > 0) {
            this.form.patchValue(this.model);
        }
    };
    FormlyForm.prototype.fieldModel = function (field) {
        if (field.key && (field.fieldGroup || field.fieldArray)) {
            return getFieldModel(this.model, field, true);
        }
        return this.model;
    };
    FormlyForm.prototype.changeModel = function (event) {
        assignModelValue(this.model, event.key, event.value);
    };
    FormlyForm.prototype.setOptions = function () {
        this.options = this.options || {};
        this.options.resetModel = this.resetModel.bind(this);
        this.options.updateInitialValue = this.updateInitialValue.bind(this);
    };
    FormlyForm.prototype.resetModel = function (model) {
        model = isNullOrUndefined(model) ? this.initialModel : model;
        this.form.patchValue(model);
        this.resetFormGroup(model, this.form);
        this.resetFormModel(model, this.model);
    };
    FormlyForm.prototype.resetFormModel = function (model, formModel, path) {
        if (!isObject(model) && !Array.isArray(model)) {
            return;
        }
        for (var key in formModel) {
            if (!(key in model) || isNullOrUndefined(model[key])) {
                if (!this.form.get((path || []).concat(key))) {
                    delete formModel[key];
                }
            }
        }
        for (var key in model) {
            if (!isNullOrUndefined(model[key])) {
                if (key in formModel) {
                    this.resetFormModel(model[key], formModel[key], (path || []).concat(key));
                }
                else {
                    formModel[key] = model[key];
                }
            }
        }
    };
    FormlyForm.prototype.resetFormGroup = function (model, form, actualKey) {
        for (var controlKey in form.controls) {
            var key = getKey(controlKey, actualKey);
            if (form.controls[controlKey] instanceof FormGroup) {
                this.resetFormGroup(model, form.controls[controlKey], key);
            }
            if (form.controls[controlKey] instanceof FormArray) {
                this.resetArray(model, form.controls[controlKey], key);
            }
            if (form.controls[controlKey] instanceof FormControl) {
                form.controls[controlKey].setValue(getValueForKey(model, key));
            }
        }
    };
    FormlyForm.prototype.resetArray = function (model, formArray, key) {
        var newValue = getValueForKey(model, key);
        for (var i = formArray.controls.length - 1; i >= 0; i--) {
            if (formArray.controls[i] instanceof FormGroup) {
                if (newValue && !isNullOrUndefined(newValue[i])) {
                    this.resetFormGroup(newValue[i], formArray.controls[i]);
                }
                else {
                    formArray.removeAt(i);
                    var value = getValueForKey(this.model, key);
                    if (Array.isArray(value)) {
                        value.splice(i, 1);
                    }
                }
            }
        }
        if (Array.isArray(newValue) && formArray.controls.length < newValue.length) {
            var remaining = newValue.length - formArray.controls.length;
            var initialLength = formArray.controls.length;
            for (var i = 0; i < remaining; i++) {
                var pos = initialLength + i;
                getValueForKey(this.model, key).push(newValue[pos]);
                formArray.controls.push(new FormGroup({}));
            }
        }
    };
    FormlyForm.prototype.updateInitialValue = function () {
        var obj = reverseDeepMerge(this.form.value, this.model);
        this.initialModel = JSON.parse(JSON.stringify(obj));
    };
    FormlyForm.decorators = [
        { type: Component, args: [{
                    selector: 'formly-form',
                    template: "\n    <formly-field *ngFor=\"let field of fields\"\n      [hide]=\"field.hideExpression\" [model]=\"fieldModel(field)\"\n      [form]=\"form\" [field]=\"field\" (modelChange)=\"changeModel($event)\"\n      [ngClass]=\"!field.fieldGroup ? field.className: undefined\"\n      [options]=\"options\">\n    </formly-field>\n    <ng-content></ng-content>\n  ",
                },] },
    ];
    FormlyForm.ctorParameters = [
        { type: FormlyFormBuilder, },
    ];
    FormlyForm.propDecorators = {
        'model': [{ type: Input },],
        'form': [{ type: Input },],
        'fields': [{ type: Input },],
        'options': [{ type: Input },],
    };
    return FormlyForm;
}());
//# sourceMappingURL=formly.form.js.map