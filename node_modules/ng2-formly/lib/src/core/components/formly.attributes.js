import { Directive, HostListener, ElementRef, Input, Renderer } from '@angular/core';
import { SingleFocusDispatcher } from '../services/formly.single.focus.dispatcher';
export var FormlyAttributes = (function () {
    function FormlyAttributes(renderer, elementRef, focusDispatcher) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.focusDispatcher = focusDispatcher;
        this.attributes = ['placeholder', 'tabindex', 'step', 'aria-describedby'];
        this.statements = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];
    }
    FormlyAttributes.prototype.onFocus = function () {
        if (!this.field.focus) {
            this.focusDispatcher.notify(this.field.key);
        }
    };
    FormlyAttributes.prototype.ngOnInit = function () {
        var _this = this;
        this.focusDispatcher.listen(function (key) {
            return _this.field.focus = _this.field.key === key;
        });
    };
    FormlyAttributes.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (changes['field']) {
            var previousOptions_1 = changes['field'].previousValue.templateOptions || {}, templateOptions_1 = this.field.templateOptions;
            this.attributes
                .filter(function (attribute) { return templateOptions_1[attribute] !== '' || templateOptions_1[attribute] !== undefined; })
                .map(function (attribute) {
                if (attribute === 'aria-describedby') {
                    _this.renderer.setElementAttribute(_this.elementRef.nativeElement, attribute, _this.field.id + '-message');
                }
                else if (previousOptions_1[attribute] !== templateOptions_1[attribute]) {
                    _this.renderer.setElementAttribute(_this.elementRef.nativeElement, attribute, templateOptions_1[attribute]);
                }
            });
            this.statements
                .filter(function (statement) {
                if (previousOptions_1[statement] !== templateOptions_1[statement]) {
                    if (typeof templateOptions_1[statement] === 'function') {
                        _this.renderer.listen(_this.elementRef.nativeElement, statement, function () {
                            templateOptions_1[statement](_this.field, _this.formControl);
                        });
                    }
                }
            });
            if (this.field.focus || (changes['field'].previousValue.focus !== undefined && changes['field'].previousValue.focus !== this.field.focus)) {
                this.renderer.invokeElementMethod(this.elementRef.nativeElement, this.field.focus ? 'focus' : 'blur', []);
                if (this.field.focus) {
                    this.focusDispatcher.notify(this.field.key);
                }
            }
        }
    };
    FormlyAttributes.decorators = [
        { type: Directive, args: [{
                    selector: '[formlyAttributes]',
                    providers: [SingleFocusDispatcher],
                },] },
    ];
    FormlyAttributes.ctorParameters = [
        { type: Renderer, },
        { type: ElementRef, },
        { type: SingleFocusDispatcher, },
    ];
    FormlyAttributes.propDecorators = {
        'field': [{ type: Input, args: ['formlyAttributes',] },],
        'formControl': [{ type: Input },],
        'onFocus': [{ type: HostListener, args: ['focus',] },],
    };
    return FormlyAttributes;
}());
//# sourceMappingURL=formly.attributes.js.map