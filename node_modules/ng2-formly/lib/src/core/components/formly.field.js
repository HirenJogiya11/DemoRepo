import { Component, EventEmitter, ElementRef, Input, Output, ViewContainerRef, ViewChild, Renderer, ComponentFactoryResolver } from '@angular/core';
import { FormlyPubSub, FormlyEventEmitter, FormlyValueChangeEvent } from '../services/formly.event.emitter';
import { FormlyConfig } from '../services/formly.config';
import { evalExpression } from '../utils';
import 'rxjs/add/operator/debounceTime';
import 'rxjs/add/operator/map';
export var FormlyField = (function () {
    function FormlyField(elementRef, formlyPubSub, renderer, formlyConfig, componentFactoryResolver) {
        this.elementRef = elementRef;
        this.formlyPubSub = formlyPubSub;
        this.renderer = renderer;
        this.formlyConfig = formlyConfig;
        this.componentFactoryResolver = componentFactoryResolver;
        this.options = {};
        this.modelChange = new EventEmitter();
    }
    Object.defineProperty(FormlyField.prototype, "hide", {
        get: function () { return this._hide; },
        set: function (value) {
            this._hide = value;
            this.renderer.setElementStyle(this.elementRef.nativeElement, 'display', value ? 'none' : '');
            if (this.field.fieldGroup) {
                for (var i = 0; i < this.field.fieldGroup.length; i++) {
                    this.psEmit(this.field.fieldGroup[i].key, 'hidden', this._hide);
                }
            }
            else {
                this.psEmit(this.field.key, 'hidden', this._hide);
            }
        },
        enumerable: true,
        configurable: true
    });
    FormlyField.prototype.ngDoCheck = function () {
        this.checkExpressionChange();
        this.checkVisibilityChange();
    };
    FormlyField.prototype.ngOnInit = function () {
        this.createFieldComponents();
    };
    FormlyField.prototype.changeModel = function (event) {
        this.modelChange.emit(event);
    };
    FormlyField.prototype.createFieldComponents = function () {
        var _this = this;
        if (this.field && !this.field.template && !this.field.fieldGroup && !this.field.fieldArray) {
            var debounce = 0;
            if (this.field.modelOptions && this.field.modelOptions.debounce && this.field.modelOptions.debounce.default) {
                debounce = this.field.modelOptions.debounce.default;
            }
            var fieldComponentRef = this.createFieldComponent();
            if (this.field.key) {
                var valueChanges_1 = fieldComponentRef.instance.formControl.valueChanges;
                if (debounce > 0) {
                    valueChanges_1 = valueChanges_1.debounceTime(debounce);
                }
                if (this.field.parsers && this.field.parsers.length > 0) {
                    this.field.parsers.map(function (parserFn) {
                        valueChanges_1 = valueChanges_1.map(parserFn);
                    });
                }
                valueChanges_1.subscribe(function (event) { return _this
                    .changeModel(new FormlyValueChangeEvent(_this.field.key, event)); });
            }
            var update = new FormlyEventEmitter();
            update.subscribe(function (option) {
                _this.field.templateOptions[option.key] = option.value;
            });
            this.formlyPubSub.setEmitter(this.field.key, update);
        }
        else if (this.field.fieldGroup || this.field.fieldArray) {
            this.createFieldComponent();
        }
        this.hide = this.field.hideExpression ? true : false;
    };
    FormlyField.prototype.createFieldComponent = function () {
        var _this = this;
        if (this.field.fieldGroup) {
            this.field.type = this.field.type || 'formly-group';
        }
        var type = this.formlyConfig.getType(this.field.type);
        var fieldComponent = this.fieldComponent;
        var fieldManipulators = this.getManipulators(this.field.templateOptions);
        var preWrappers = this.runManipulators(fieldManipulators.preWrapper, this.field);
        var postWrappers = this.runManipulators(fieldManipulators.postWrapper, this.field);
        if (!type.wrappers)
            type.wrappers = [];
        if (!this.field.wrappers)
            this.field.wrappers = [];
        var wrappers = preWrappers.concat(this.field.wrappers, postWrappers);
        wrappers.map(function (wrapperName) {
            var wrapperRef = _this.createComponent(fieldComponent, _this.formlyConfig.getWrapper(wrapperName).component);
            fieldComponent = wrapperRef.instance.fieldComponent;
        });
        return this.createComponent(fieldComponent, type.component);
    };
    FormlyField.prototype.createComponent = function (fieldComponent, component) {
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);
        var ref = fieldComponent.createComponent(componentFactory);
        Object.assign(ref.instance, {
            model: this.model,
            form: this.form,
            field: this.field,
            options: this.options,
        });
        return ref;
    };
    FormlyField.prototype.psEmit = function (fieldKey, eventKey, value) {
        if (this.formlyPubSub && this.formlyPubSub.getEmitter(fieldKey) && this.formlyPubSub.getEmitter(fieldKey).emit) {
            this.formlyPubSub.getEmitter(fieldKey).emit(new FormlyValueChangeEvent(eventKey, value));
        }
    };
    FormlyField.prototype.getManipulators = function (options) {
        var preWrapper = [];
        var postWrapper = [];
        if (options && options.templateManipulators) {
            addManipulators(options.templateManipulators);
        }
        addManipulators(this.formlyConfig.templateManipulators);
        return { preWrapper: preWrapper, postWrapper: postWrapper };
        function addManipulators(manipulators) {
            var _a = (manipulators || {}), _b = _a.preWrapper, pre = _b === void 0 ? [] : _b, _c = _a.postWrapper, post = _c === void 0 ? [] : _c;
            preWrapper = preWrapper.concat(pre);
            postWrapper = postWrapper.concat(post);
        }
    };
    FormlyField.prototype.runManipulators = function (manipulators, field) {
        var wrappers = [];
        if (manipulators) {
            manipulators.map(function (manipulator) {
                if (manipulator(field)) {
                    wrappers.push(manipulator(field));
                }
            });
            return wrappers;
        }
    };
    FormlyField.prototype.checkVisibilityChange = function () {
        if (this.field && this.field.hideExpression !== undefined && this.field.hideExpression) {
            var hideExpressionResult = evalExpression(this.field.hideExpression, this, [this.model, this.options.formState]);
            if (hideExpressionResult !== this.hide) {
                this.hide = hideExpressionResult;
            }
        }
    };
    FormlyField.prototype.checkExpressionChange = function () {
        if (this.field && this.field.expressionProperties !== undefined) {
            var expressionProperties = this.field.expressionProperties;
            if (expressionProperties) {
                for (var key in expressionProperties) {
                    var expressionValue = evalExpression(expressionProperties[key].expression, this, [this.model, this.options.formState]);
                    evalExpression(expressionProperties[key].expressionValueSetter, this, [expressionValue, this.model, this.field.templateOptions, this.field.validation]);
                }
                var formControl = this.form.get(this.field.key), field = this.field;
                if (formControl) {
                    if (formControl.status === 'DISABLED' && !field.templateOptions.disabled) {
                        formControl.enable();
                    }
                    if (formControl.status !== 'DISABLED' && field.templateOptions.disabled) {
                        formControl.disable();
                    }
                    if (!formControl.dirty && formControl.invalid && field.validation && !field.validation.show) {
                        formControl.markAsUntouched();
                    }
                    if (!formControl.dirty && formControl.invalid && field.validation && field.validation.show) {
                        formControl.markAsTouched();
                    }
                }
            }
        }
    };
    FormlyField.decorators = [
        { type: Component, args: [{
                    selector: 'formly-field',
                    template: "\n    <template #fieldComponent></template>\n    <div *ngIf=\"field.template && !field.fieldGroup\" [innerHtml]=\"field.template\"></div>\n  ",
                },] },
    ];
    FormlyField.ctorParameters = [
        { type: ElementRef, },
        { type: FormlyPubSub, },
        { type: Renderer, },
        { type: FormlyConfig, },
        { type: ComponentFactoryResolver, },
    ];
    FormlyField.propDecorators = {
        'model': [{ type: Input },],
        'form': [{ type: Input },],
        'field': [{ type: Input },],
        'options': [{ type: Input },],
        'hide': [{ type: Input },],
        'modelChange': [{ type: Output },],
        'fieldComponent': [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] },],
    };
    return FormlyField;
}());
//# sourceMappingURL=formly.field.js.map