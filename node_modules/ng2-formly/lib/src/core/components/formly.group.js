var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Component } from '@angular/core';
import { FieldType } from '../templates/field.type';
import { clone } from '../utils';
export var FormlyGroup = (function (_super) {
    __extends(FormlyGroup, _super);
    function FormlyGroup() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(FormlyGroup.prototype, "newOptions", {
        get: function () {
            return clone(this.options);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyGroup.prototype, "formlyGroup", {
        get: function () {
            if (this.field.key) {
                return this.form.get(this.field.key);
            }
            else {
                return this.form;
            }
        },
        enumerable: true,
        configurable: true
    });
    FormlyGroup.decorators = [
        { type: Component, args: [{
                    selector: 'formly-group',
                    template: "\n    <formly-form [fields]=\"field.fieldGroup\" [model]=\"model\" [form]=\"formlyGroup\" [options]=\"newOptions\" [ngClass]=\"field.className\"></formly-form>\n  ",
                },] },
    ];
    FormlyGroup.ctorParameters = [];
    return FormlyGroup;
}(FieldType));
//# sourceMappingURL=formly.group.js.map