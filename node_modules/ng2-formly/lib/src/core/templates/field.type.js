var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Field } from './field';
export var FieldType = (function (_super) {
    __extends(FieldType, _super);
    function FieldType() {
        _super.apply(this, arguments);
    }
    FieldType.prototype.ngOnInit = function () {
        this.lifeCycleHooks('onInit');
    };
    FieldType.prototype.ngOnChanges = function (changes) {
        this.lifeCycleHooks('onChanges');
    };
    FieldType.prototype.ngDoCheck = function () {
        this.lifeCycleHooks('doCheck');
    };
    FieldType.prototype.ngAfterContentInit = function () {
        this.lifeCycleHooks('afterContentInit');
    };
    FieldType.prototype.ngAfterContentChecked = function () {
        this.lifeCycleHooks('afterContentChecked');
    };
    FieldType.prototype.ngAfterViewInit = function () {
        this.lifeCycleHooks('afterViewInit');
    };
    FieldType.prototype.ngAfterViewChecked = function () {
        this.lifeCycleHooks('afterViewChecked');
    };
    FieldType.prototype.ngOnDestroy = function () {
        this.lifeCycleHooks('onDestroy');
    };
    Object.defineProperty(FieldType.prototype, "lifecycle", {
        get: function () {
            return this.field.lifecycle;
        },
        enumerable: true,
        configurable: true
    });
    FieldType.prototype.lifeCycleHooks = function (type) {
        if (this.lifecycle && this.lifecycle[type]) {
            this.lifecycle[type].bind(this)(this.form, this.field, this.model, this.options);
        }
    };
    return FieldType;
}(Field));
//# sourceMappingURL=field.type.js.map