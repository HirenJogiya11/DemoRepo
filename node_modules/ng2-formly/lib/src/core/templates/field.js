import { Input } from '@angular/core';
export var Field = (function () {
    function Field() {
    }
    Object.defineProperty(Field.prototype, "key", {
        get: function () { return this.field.key; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "formControl", {
        get: function () { return this.form.get(this.key); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "templateOptions", {
        get: function () {
            console.warn(this.constructor['name'] + ": 'templateOptions' is deprecated. Use 'to' instead.");
            return this.to;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "to", {
        get: function () { return this.field.templateOptions; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "valid", {
        get: function () { return this.formControl.touched && !this.formControl.valid; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "id", {
        get: function () { return this.field.id; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "formState", {
        get: function () { return this.options.formState || {}; },
        enumerable: true,
        configurable: true
    });
    Field.propDecorators = {
        'form': [{ type: Input },],
        'field': [{ type: Input },],
        'model': [{ type: Input },],
        'options': [{ type: Input },],
    };
    return Field;
}());
//# sourceMappingURL=field.js.map