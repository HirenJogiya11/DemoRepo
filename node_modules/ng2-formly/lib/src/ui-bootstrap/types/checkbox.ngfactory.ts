/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../../src/ui-bootstrap/types/checkbox';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/render/api';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/metadata/view';
import * as import5 from '@angular/core/src/linker/view_type';
import * as import6 from '@angular/core/src/change_detection/change_detection';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '@angular/core/src/linker/view_container';
import * as import9 from '../../../node_modules/@angular/common/src/directives/ng_if.ngfactory';
import * as import10 from '@angular/core/src/linker/template_ref';
import * as import11 from '@angular/common/src/directives/ng_if';
import * as import12 from '../../../node_modules/@angular/forms/src/directives/checkbox_value_accessor.ngfactory';
import * as import13 from '../../../node_modules/@angular/forms/src/directives/reactive_directives/form_control_directive.ngfactory';
import * as import14 from '../../../node_modules/@angular/forms/src/directives/ng_control_status.ngfactory';
import * as import15 from '../../../../src/core/services/formly.single.focus.dispatcher';
import * as import16 from '../../core/components/formly.attributes.ngfactory';
import * as import17 from '@angular/core/src/linker/element_ref';
import * as import18 from '@angular/forms/src/directives/checkbox_value_accessor';
import * as import19 from '@angular/forms/src/directives/control_value_accessor';
import * as import20 from '@angular/forms/src/directives/reactive_directives/form_control_directive';
import * as import21 from '@angular/forms/src/directives/ng_control';
import * as import22 from '@angular/forms/src/directives/ng_control_status';
import * as import23 from '../../../../src/core/components/formly.attributes';
export class Wrapper_FormlyFieldCheckbox {
  /*private*/ _eventHandler:Function;
  context:import0.FormlyFieldCheckbox;
  /*private*/ _changed:boolean;
  constructor() {
    this._changed = false;
    this.context = new import0.FormlyFieldCheckbox();
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_FormlyFieldCheckbox_Host:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,([] as any[]),{});
class View_FormlyFieldCheckbox_Host0 extends import1.AppView<any> {
  _el_0:any;
  compView_0:import1.AppView<import0.FormlyFieldCheckbox>;
  _FormlyFieldCheckbox_0_3:Wrapper_FormlyFieldCheckbox;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_FormlyFieldCheckbox_Host0,renderType_FormlyFieldCheckbox_Host,import5.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'formly-field-checkbox',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_FormlyFieldCheckbox0(this.viewUtils,this,0,this._el_0);
    this._FormlyFieldCheckbox_0_3 = new Wrapper_FormlyFieldCheckbox();
    this.compView_0.create(this._FormlyFieldCheckbox_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import7.ComponentRef_<any>(0,this,this._el_0,this._FormlyFieldCheckbox_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.FormlyFieldCheckbox) && (0 === requestNodeIndex))) { return this._FormlyFieldCheckbox_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._FormlyFieldCheckbox_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const FormlyFieldCheckboxNgFactory:import7.ComponentFactory<import0.FormlyFieldCheckbox> = new import7.ComponentFactory<import0.FormlyFieldCheckbox>('formly-field-checkbox',View_FormlyFieldCheckbox_Host0,import0.FormlyFieldCheckbox);
const styles_FormlyFieldCheckbox:any[] = ([] as any[]);
var renderType_FormlyFieldCheckbox:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,styles_FormlyFieldCheckbox,{});
export class View_FormlyFieldCheckbox0 extends import1.AppView<import0.FormlyFieldCheckbox> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _anchor_3:any;
  /*private*/ _vc_3:import8.ViewContainer;
  _TemplateRef_3_5:any;
  _NgIf_3_6:import9.Wrapper_NgIf;
  _text_4:any;
  _el_5:any;
  _text_6:any;
  _text_7:any;
  /*private*/ _expr_11:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_FormlyFieldCheckbox0,renderType_FormlyFieldCheckbox,import5.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
    this._expr_11 = import6.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'label',new import3.InlineArray2(2,'class','custom-control custom-checkbox'),(null as any));
    this._text_2 = this.renderer.createText(this._el_1,'\n      ',(null as any));
    this._anchor_3 = this.renderer.createTemplateAnchor(this._el_1,(null as any));
    this._vc_3 = new import8.ViewContainer(3,1,this,this._anchor_3);
    this._TemplateRef_3_5 = new import10.TemplateRef_(this,3,this._anchor_3);
    this._NgIf_3_6 = new import9.Wrapper_NgIf(this._vc_3.vcRef,this._TemplateRef_3_5);
    this._text_4 = this.renderer.createText(this._el_1,'',(null as any));
    this._el_5 = import3.createRenderElement(this.renderer,this._el_1,'span',new import3.InlineArray2(2,'class','custom-control-indicator'),(null as any));
    this._text_6 = this.renderer.createText(this._el_1,'\n    ',(null as any));
    this._text_7 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._anchor_3,
      this._text_4,
      this._el_5,
      this._text_6,
      this._text_7
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import10.TemplateRef) && (3 === requestNodeIndex))) { return this._TemplateRef_3_5; }
    if (((token === import11.NgIf) && (3 === requestNodeIndex))) { return this._NgIf_3_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_3_0_0:boolean = !this.context.to.hidden;
    this._NgIf_3_6.check_ngIf(currVal_3_0_0,throwOnChange,false);
    this._NgIf_3_6.ngDoCheck(this,this._anchor_3,throwOnChange);
    this._vc_3.detectChangesInNestedViews(throwOnChange);
    const currVal_11:any = import3.inlineInterpolate(1,'\n        ',this.context.to.label,'\n        ');
    if (import3.checkBinding(throwOnChange,this._expr_11,currVal_11)) {
      this.renderer.setText(this._text_4,currVal_11);
      this._expr_11 = currVal_11;
    }
  }
  destroyInternal():void {
    this._vc_3.destroyNestedViews();
  }
  createEmbeddedViewInternal(nodeIndex:number):import1.AppView<any> {
    if ((nodeIndex == 3)) { return new View_FormlyFieldCheckbox1(this.viewUtils,this,3,this._anchor_3,this._vc_3); }
    return (null as any);
  }
}
class View_FormlyFieldCheckbox1 extends import1.AppView<any> {
  _el_0:any;
  _CheckboxControlValueAccessor_0_3:import12.Wrapper_CheckboxControlValueAccessor;
  _NG_VALUE_ACCESSOR_0_4:any[];
  _FormControlDirective_0_5:import13.Wrapper_FormControlDirective;
  _NgControl_0_6:any;
  _NgControlStatus_0_7:import14.Wrapper_NgControlStatus;
  _SingleFocusDispatcher_0_8:import15.SingleFocusDispatcher;
  _FormlyAttributes_0_9:import16.Wrapper_FormlyAttributes;
  /*private*/ _expr_8:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import8.ViewContainer) {
    super(View_FormlyFieldCheckbox1,renderType_FormlyFieldCheckbox,import5.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
    this._expr_8 = import6.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'input',new import3.InlineArray8(6,'class','custom-control-input','type','checkbox','value','on'),(null as any));
    this._CheckboxControlValueAccessor_0_3 = new import12.Wrapper_CheckboxControlValueAccessor(this.renderer,new import17.ElementRef(this._el_0));
    this._NG_VALUE_ACCESSOR_0_4 = [this._CheckboxControlValueAccessor_0_3.context];
    this._FormControlDirective_0_5 = new import13.Wrapper_FormControlDirective((null as any),(null as any),this._NG_VALUE_ACCESSOR_0_4);
    this._NgControl_0_6 = this._FormControlDirective_0_5.context;
    this._NgControlStatus_0_7 = new import14.Wrapper_NgControlStatus(this._NgControl_0_6);
    this._SingleFocusDispatcher_0_8 = new import15.SingleFocusDispatcher();
    this._FormlyAttributes_0_9 = new import16.Wrapper_FormlyAttributes(this.renderer,new import17.ElementRef(this._el_0),this._SingleFocusDispatcher_0_8);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray8(6,'change',(null as any),'blur',(null as any),'focus',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import18.CheckboxControlValueAccessor) && (0 === requestNodeIndex))) { return this._CheckboxControlValueAccessor_0_3.context; }
    if (((token === import19.NG_VALUE_ACCESSOR) && (0 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_0_4; }
    if (((token === import20.FormControlDirective) && (0 === requestNodeIndex))) { return this._FormControlDirective_0_5.context; }
    if (((token === import21.NgControl) && (0 === requestNodeIndex))) { return this._NgControl_0_6; }
    if (((token === import22.NgControlStatus) && (0 === requestNodeIndex))) { return this._NgControlStatus_0_7.context; }
    if (((token === import15.SingleFocusDispatcher) && (0 === requestNodeIndex))) { return this._SingleFocusDispatcher_0_8; }
    if (((token === import23.FormlyAttributes) && (0 === requestNodeIndex))) { return this._FormlyAttributes_0_9.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._CheckboxControlValueAccessor_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_0_1_0:any = this.parentView.context.formControl;
    this._FormControlDirective_0_5.check_form(currVal_0_1_0,throwOnChange,false);
    this._FormControlDirective_0_5.ngDoCheck(this,this._el_0,throwOnChange);
    this._NgControlStatus_0_7.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_0_3_0:any = this.parentView.context.field;
    this._FormlyAttributes_0_9.check_field(currVal_0_3_0,throwOnChange,false);
    const currVal_0_3_1:any = this.parentView.context.formControl;
    this._FormlyAttributes_0_9.check_formControl(currVal_0_3_1,throwOnChange,false);
    this._FormlyAttributes_0_9.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_8:any = this.parentView.context.id;
    if (import3.checkBinding(throwOnChange,this._expr_8,currVal_8)) {
      this.renderer.setElementProperty(this._el_0,'id',currVal_8);
      this._expr_8 = currVal_8;
    }
    this._NgControlStatus_0_7.checkHost(this,this,this._el_0,throwOnChange);
  }
  destroyInternal():void {
    this._FormControlDirective_0_5.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._CheckboxControlValueAccessor_0_3.handleEvent(eventName,$event) && result);
    result = (this._FormlyAttributes_0_9.handleEvent(eventName,$event) && result);
    return result;
  }
}