var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Component } from '@angular/core';
import { FieldType } from '../../core/core';
export var SelectOption = (function () {
    function SelectOption(label, value, children) {
        this.label = label;
        this.value = value;
        this.group = children;
    }
    return SelectOption;
}());
export var FormlyFieldSelect = (function (_super) {
    __extends(FormlyFieldSelect, _super);
    function FormlyFieldSelect() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(FormlyFieldSelect.prototype, "labelProp", {
        get: function () { return this.to['labelProp'] || 'label'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyFieldSelect.prototype, "valueProp", {
        get: function () { return this.to['valueProp'] || 'value'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyFieldSelect.prototype, "groupProp", {
        get: function () { return this.to['groupProp'] || 'group'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyFieldSelect.prototype, "selectOptions", {
        get: function () {
            var _this = this;
            var options = [];
            this.to.options.map(function (option) {
                if (!option[_this.groupProp]) {
                    options.push(option);
                }
                else {
                    var filteredOption = options.filter(function (filteredOption) {
                        return filteredOption.label === option[_this.groupProp];
                    });
                    if (filteredOption[0]) {
                        filteredOption[0].group.push({
                            label: option[_this.labelProp],
                            value: option[_this.valueProp],
                        });
                    }
                    else {
                        options.push({
                            label: option[_this.groupProp],
                            group: [{ value: option[_this.valueProp], label: option[_this.labelProp] }],
                        });
                    }
                }
            });
            return options;
        },
        enumerable: true,
        configurable: true
    });
    FormlyFieldSelect.decorators = [
        { type: Component, args: [{
                    selector: 'formly-field-select',
                    template: "\n    <select [id]=\"id\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\">\n      <option value=\"\" *ngIf=\"to.placeholder\">{{to.placeholder}}</option>\n      <template ngFor let-item [ngForOf]=\"selectOptions\">\n       <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n         <option *ngFor=\"let child of item.group\" [value]=\"child.value\">\n           {{child.label}}\n         </option>\n       </optgroup>\n       <option *ngIf=\"!item.group\" [value]=\"item.value\">{{item.label}}</option>\n    </template>\n    </select>\n  ",
                },] },
    ];
    FormlyFieldSelect.ctorParameters = [];
    return FormlyFieldSelect;
}(FieldType));
//# sourceMappingURL=select.js.map