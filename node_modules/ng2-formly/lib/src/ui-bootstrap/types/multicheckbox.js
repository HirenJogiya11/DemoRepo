var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Component } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
import { FieldType } from '../../core/core';
export var FormlyFieldMultiCheckbox = (function (_super) {
    __extends(FormlyFieldMultiCheckbox, _super);
    function FormlyFieldMultiCheckbox() {
        _super.apply(this, arguments);
    }
    FormlyFieldMultiCheckbox.createControl = function (model, field) {
        var controlGroupConfig = field.templateOptions.options.reduce(function (previous, option) {
            previous[option.key] = new FormControl(model ? model[option.key] : undefined);
            return previous;
        }, {});
        return new FormGroup(controlGroupConfig);
    };
    FormlyFieldMultiCheckbox.decorators = [
        { type: Component, args: [{
                    selector: 'formly-field-multicheckbox',
                    template: "\n    <div *ngFor=\"let option of to.options\" class=\"checkbox\">\n        <label class=\"custom-control custom-checkbox\">\n            <input [id]=\"id\" type=\"checkbox\" [value]=\"option.value\" [formControl]=\"formControl.get(option.key)\"\n            [formlyAttributes]=\"field\" class=\"custom-control-input\">\n            {{option.value}}\n            <span class=\"custom-control-indicator\"></span>\n        </label>\n    </div>\n  ",
                },] },
    ];
    FormlyFieldMultiCheckbox.ctorParameters = [];
    return FormlyFieldMultiCheckbox;
}(FieldType));
//# sourceMappingURL=multicheckbox.js.map