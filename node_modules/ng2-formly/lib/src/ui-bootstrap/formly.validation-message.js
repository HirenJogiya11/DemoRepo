import { Component, Input } from '@angular/core';
import { FormlyValidationMessages } from '../core/core';
export var FormlyValidationMessage = (function () {
    function FormlyValidationMessage(formlyMessages) {
        this.formlyMessages = formlyMessages;
    }
    Object.defineProperty(FormlyValidationMessage.prototype, "errorMessage", {
        get: function () {
            var _this = this;
            var _loop_1 = function(error) {
                if (this_1.fieldForm.errors.hasOwnProperty(error)) {
                    var message_1 = this_1.formlyMessages.getValidatorErrorMessage(error);
                    ['validators', 'asyncValidators'].map(function (validators) {
                        if (_this.field[validators] && _this.field[validators][error] && _this.field[validators][error].message) {
                            message_1 = _this.field.validators[error].message;
                        }
                    });
                    if (typeof message_1 === 'function') {
                        return { value: message_1(this_1.fieldForm.errors[error], this_1.field) };
                    }
                    return { value: message_1 };
                }
            };
            var this_1 = this;
            for (var error in this.fieldForm.errors) {
                var state_1 = _loop_1(error);
                if (typeof state_1 === "object") return state_1.value;
            }
        },
        enumerable: true,
        configurable: true
    });
    FormlyValidationMessage.decorators = [
        { type: Component, args: [{
                    selector: 'formly-validation-message',
                    template: "{{errorMessage}}",
                },] },
    ];
    FormlyValidationMessage.ctorParameters = [
        { type: FormlyValidationMessages, },
    ];
    FormlyValidationMessage.propDecorators = {
        'fieldForm': [{ type: Input },],
        'field': [{ type: Input },],
    };
    return FormlyValidationMessage;
}());
//# sourceMappingURL=formly.validation-message.js.map